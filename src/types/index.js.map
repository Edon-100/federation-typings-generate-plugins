{"version":3,"sources":["../../../../../packages/typescript/src/types/index.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../../../../node_modules/webpack/module.d.ts\" />\n\nimport { Compilation, container } from 'webpack';\n\nexport type ModuleFederationPluginOptions = ConstructorParameters<\n  typeof container.ModuleFederationPlugin\n>['0'];\n\nexport interface TypeFetchOptions {\n  /** The maximum time to wait for downloading remote types in milliseconds.\n   * @default 2000  */\n  downloadRemoteTypesTimeout?: number;\n  /** The maximum number of retry attempts.\n   * @default 3  */\n  maxRetryAttempts?: number;\n  /** The default number of milliseconds between retries.\n   * @default 1000  */\n  retryDelay?: number;\n  /** Should retry if no types are found in destination.\n   * @default true  */\n  shouldRetryOnTypesNotFound?: boolean;\n  /** Should retry type fetching operations.\n   * @default true  */\n  shouldRetry?: boolean;\n}\n\nexport interface TypeServeOptions {\n  /** The port to serve type files on, this is separate from the webpack dev server port. */\n  port?: number;\n  /** The host to serve type files on. Example: 'localhost' */\n  host?: string;\n}\n\nexport interface FederatedTypesPluginOptions {\n  disableTypeCompilation?: boolean;\n  disableDownloadingRemoteTypes?: boolean;\n  federationConfig: ModuleFederationPluginOptions;\n  /** @default '@mf-types'*/\n  typescriptFolderName?: string;\n  /** @default '_types' */\n  typescriptCompiledFolderName?: string;\n  additionalFilesToCompile?: string[];\n  /** @default 'tsc' */\n  compiler?: 'tsc' | 'vue-tsc';\n  typeFetchOptions?: TypeFetchOptions;\n  typeServeOptions?: TypeServeOptions;\n}\n\nexport interface TypesStatsJson {\n  publicPath: string;\n  files: Record<string, string>;\n}\n\nexport type CompilationParams = Compilation['params'] & {\n  federated_types: Record<string, string>;\n};\n"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,qEAAqE"}